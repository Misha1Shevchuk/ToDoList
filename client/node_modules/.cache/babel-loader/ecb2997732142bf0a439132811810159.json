{"ast":null,"code":"var _jsxFileName = \"/home/misha/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u0438/Projects/ToDoList/client/src/components/Projects/NewProjectForm.jsx\";\nimport React from \"react\";\nimport ItemProject from \"./ItemProject\";\n\nclass NewProjectForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getObjetProject = () => {\n      fetch(\"http://localhost:3001/projectsList\", {\n        method: \"POST\"\n      }).then(results => {\n        return results.json();\n      }).then(data => {\n        console.log(data);\n        let projects = data.map(proj => {\n          return React.createElement(ItemProject, {\n            key: proj.id_project,\n            element: proj,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          });\n        });\n        this.setState({\n          list: projects\n        });\n      });\n    };\n\n    this.clearForm = () => {\n      this.setState({\n        project: \"\"\n      });\n    };\n\n    this.render = () => {\n      return React.createElement(\"form\", {\n        id: \"form-send-project\",\n        name: \"form-send-project\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.project,\n        onChange: this.handleChange,\n        className: \"form-add-input\",\n        id: \"new-project\",\n        name: \"newproject\",\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"red-button-accept form-add-buttons\",\n        id: \"send-project\",\n        name: \"send-project\",\n        value: \"\\u0414\\u043E\\u0434\\u0430\\u0442\\u0438\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"reset\",\n        onClick: this.clearForm,\n        className: \"button-cancel form-add-buttons\",\n        id: \"reset-project\",\n        value: \"\\u0421\\u043A\\u0430\\u0441\\u0443\\u0432\\u0430\\u0442\\u0438\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }));\n    };\n\n    this.state = {\n      project: \"\",\n      list: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      project: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.warn('Відправлений проект: ' + this.state.project);\n    fetch(\"http://localhost:3001/sendproject\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        newproject: this.state.project\n      })\n    }); // .then(results => {\n    //     return results.json();\n    // }).then(data => {\n    //     let projects = data.map((proj) => {\n    //         return (\n    //             <ItemProject key={proj.id_project} element={proj} />\n    //         )\n    //     })\n    //     this.setState({ list: projects });\n    //     this.clearForm();\n    // })\n\n    this.getObjectProject();\n  }\n\n}\n\nexport default NewProjectForm;","map":{"version":3,"sources":["/home/misha/Документи/Projects/ToDoList/client/src/components/Projects/NewProjectForm.jsx"],"names":["React","ItemProject","NewProjectForm","Component","constructor","props","getObjetProject","fetch","method","then","results","json","data","console","log","projects","map","proj","id_project","setState","list","clearForm","project","render","handleSubmit","state","handleChange","bind","event","target","value","preventDefault","warn","headers","body","JSON","stringify","newproject","getObjectProject"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ItemProject from \"./ItemProject\";\n\nclass NewProjectForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            project: \"\",\n            list: \"\"\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ project: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.warn('Відправлений проект: ' + this.state.project);\n        fetch(`http://localhost:3001/sendproject`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ newproject: this.state.project })\n        })\n        // .then(results => {\n        //     return results.json();\n        // }).then(data => {\n        //     let projects = data.map((proj) => {\n        //         return (\n        //             <ItemProject key={proj.id_project} element={proj} />\n        //         )\n        //     })\n        //     this.setState({ list: projects });\n        //     this.clearForm();\n        // })\n        this.getObjectProject();\n    }\n\n    getObjetProject = () => {\n        fetch(`http://localhost:3001/projectsList`, { method: \"POST\" }).then(results => {\n            return results.json();\n        }).then(data => {\n            console.log(data);\n            let projects = data.map((proj) => {\n                return (\n                    <ItemProject key={proj.id_project} element={proj} />\n                )\n            })\n            this.setState({ list: projects });\n        })\n    }\n\n    clearForm = () => {\n        this.setState({ project: \"\" });\n    }\n\n    render = () => {\n        return (\n            <form id=\"form-send-project\" name=\"form-send-project\" onSubmit={this.handleSubmit}>\n                <input type=\"text\" value={this.state.project} onChange={this.handleChange} className=\"form-add-input\" id=\"new-project\" name=\"newproject\" autoComplete=\"off\" /><br />\n                <input type=\"submit\" className=\"red-button-accept form-add-buttons\" id=\"send-project\" name=\"send-project\" value=\"Додати\" />\n                <input type=\"reset\" onClick={this.clearForm} className=\"button-cancel form-add-buttons\" id=\"reset-project\" value=\"Скасувати\" />\n            </form>\n        );\n    }\n}\n\nexport default NewProjectForm;"]},"metadata":{},"sourceType":"module"}